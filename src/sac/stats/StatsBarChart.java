package sac.stats;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.IOException;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.TextAnchor;

/**
 * Bar chart related to statistics object (charts are generated by jfreechart software,
 * http://www.jfree.org/jfreechart/).
 * 
 * @author Przemysław Klęsk (<a href="mailto:pklesk@wi.zut.edu.pl">wi.zut.edu.pl</a>)
 * @author Marcin Korzeń (<a href="mailto:mkorzen@wi.zut.edu.pl">wi.zut.edu.pl</a>)
 */
public class StatsBarChart {

	/**
	 * Constant - default chart width.
	 */
	private static final int DEFAULT_WIDTH = 1200;
	
	/**
	 * Constant - default chart height.
	 */
	private static final int DEFAULT_HEIGHT = 500;

	/**
	 * Reference to statistics object.
	 */
	private Stats stats;

	/**
	 * Plot label.
	 */
	private String plotLabel;
	
	/**
	 * Label for x axis.
	 */
	private String xAxisLabel;
	
	/**
	 * Label for y axis.
	 */
	private String yAxisLabel;
	
	/**
	 * Reference to DefaultCategoryDataset object. 
	 */
	private DefaultCategoryDataset dataset;
	
	/**
	 * Chart width.
	 */
	private int width = DEFAULT_WIDTH;
	
	/**
	 * Chart height.
	 */
	private int height = DEFAULT_HEIGHT;

	/**
	 * Creates a new instance of StatsBarChart.
	 * 
	 * @param stats reference to statistics object
	 * @param plotLabel wanted plot label
	 * @param xAxisLabel wanted x axis label
	 * @param yAxisLabel wanted y axis label
	 */
	public StatsBarChart(Stats stats, String plotLabel, String xAxisLabel, String yAxisLabel) {
		this.stats = stats;
		this.plotLabel = plotLabel;
		this.xAxisLabel = xAxisLabel;
		this.yAxisLabel = yAxisLabel;
		dataset = new DefaultCategoryDataset();
	}

	/**
	 * Calculates and adds a labeled value to this bar chart, and returns the reference to it.
	 * 	 
	 * @param subcategoryLabel imposed subcategory label 
	 * @param categoryLabel category label
	 * @param operationType type of operation
	 * @param category category as string
	 * @param multiIndexPattern multi index pattern (may contain nulls)
	 * @return reference to bar chart with a new value added to it
	 */
	public StatsBarChart setValue(String subcategoryLabel, String categoryLabel, StatsOperationType operationType, String category, Object... multiIndexPattern) {
		double value = stats.operation(operationType, category, multiIndexPattern);
		dataset.setValue(value, subcategoryLabel, categoryLabel);
		return this;
	}

	/**
	 * Saves this bar chart as a JPEG file of wanted width and height, and under given location.
	 * 
	 * @param filePath wanted location
	 * @param width chart width
	 * @param height chart height
	 * @throws IOException when something related to file operations goes wrong
	 */
	public void saveAsJPEG(String filePath, int width, int height) throws IOException {
		BarRenderer.setDefaultShadowsVisible(false);
		ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
		JFreeChart chart = ChartFactory.createBarChart(plotLabel, xAxisLabel, yAxisLabel, dataset, PlotOrientation.VERTICAL, true, true, false);

		// nicer
		CategoryPlot categoryPlot = chart.getCategoryPlot();
		CategoryItemRenderer categoryRenderer = new BarRenderer();
		((BarRenderer) categoryRenderer).setItemMargin(0);
		categoryRenderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER));
		categoryRenderer.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER));
		categoryPlot.setRenderer(categoryRenderer);
		formatBarCharts(categoryPlot);
		if (chart.getTitle() != null) {
			chart.getTitle().setFont(new Font("SansSerif", Font.BOLD, 20));
		}
		chart.setPadding(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
		chart.setAntiAlias(true);

		ChartUtilities.saveChartAsJPEG(new File(filePath), chart, width, height);
	}

	/**
	 * Saves this bar chart as a JPEG file of default width and height and under given location.
	 * 
	 * @param filePath wanted location
	 * @throws IOException when something related to file operations goes wrong
	 */
	public void saveAsJPEG(String filePath) throws IOException {
		saveAsJPEG(filePath, width, height);
	}

	/**
	 * Formats this bar chart (imposes suitable fonts, margins, colors, etc.).
	 * This method is called from within saveAsJPEG(...) call.
	 * 
	 * @param categoryPlot reference to category plot to be formatted
	 */
	private void formatBarCharts(CategoryPlot categoryPlot) {
		if (categoryPlot != null) {

			// display values for each column
			CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator();
			categoryPlot.getRenderer().setBaseItemLabelsVisible(true);
			categoryPlot.getRenderer().setBaseItemLabelGenerator(generator);

			Font valuesFont = new Font("SansSerif", Font.PLAIN, 16);

			NumberAxis rangeAxis = (NumberAxis) categoryPlot.getRangeAxis();
			rangeAxis.setUpperMargin(0.15);
			rangeAxis.setLowerMargin(0.15);
			rangeAxis.setStandardTickUnits(NumberAxis.createStandardTickUnits());
			rangeAxis.setTickLabelFont(valuesFont);

			Font labelFont = new Font("SansSerif", Font.BOLD, 20);
			categoryPlot.getDomainAxis().setLabelFont(labelFont);
			rangeAxis.setLabelFont(labelFont);

			Font tickLabelFont = new Font("SansSerif", Font.BOLD, 16);
			categoryPlot.getDomainAxis().setMaximumCategoryLabelWidthRatio(10.0f);
			categoryPlot.getDomainAxis().setTickLabelFont(tickLabelFont);

			categoryPlot.getRenderer().setSeriesPaint(0, Color.GRAY);
			categoryPlot.getRenderer().setSeriesPaint(1, Color.LIGHT_GRAY);
			categoryPlot.getRenderer().setSeriesPaint(2, Color.DARK_GRAY);

			categoryPlot.getRenderer().setSeriesOutlineStroke(1, new BasicStroke(0.0F));

			for (int i = 0; i < categoryPlot.getCategories().size(); i++)
				categoryPlot.getRenderer().setSeriesItemLabelFont(i, valuesFont);

			categoryPlot.setBackgroundPaint(Color.white);
			categoryPlot.setDomainGridlinePaint(Color.LIGHT_GRAY);
			categoryPlot.setDomainGridlinesVisible(true);
			categoryPlot.setRangeGridlinePaint(Color.LIGHT_GRAY);
		}
	}

	/**
	 * Sets width of this bar chart.
	 * 
	 * @param width width to be set
	 */
	public void setWidth(int width) {
		this.width = width;
	}

	/**
	 * Sets height of this bar chart.
	 * 
	 * @param height height to be set
	 */
	public void setHeight(int height) {
		this.height = height;
	}
}